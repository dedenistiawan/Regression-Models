[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Regresion Models",
    "section": "",
    "text": "Kata Pengantar\ntambahan baru Buku ini ditujukan bagi mahasiswa, dosen, peneliti, serta praktisi yang ingin memahami dan mengaplikasikan model regresi menggunakan perangkat lunak R dengan pendekatan Quarto untuk dokumentasi analisis yang lebih interaktif dan reproducible.\nPemodelan regresi merupakan salah satu teknik statistik yang fundamental dalam berbagai disiplin ilmu, mulai dari ekonomi, sosial, teknik, hingga kesehatan. Dengan kemampuan R sebagai perangkat lunak open-source yang kuat, pengguna dapat melakukan analisis data secara efisien serta menyajikan hasil secara profesional menggunakan Quarto. Buku ini disusun secara sistematis mulai dari konsep dasar hingga implementasi dalam berbagai kasus nyata, disertai contoh kode dan interpretasi hasil.\nBuku ini dilisensikan di bawah CC BY-NC-ND 3.0 License. Jika Anda ingin mendapatkan salinan file PDF buku ini, Anda dapat memesannya di LYNK. Jika Anda menghargai kesempatan untuk membaca buku ini secara gratis dan ingin memberikan dukungan, silakan berdonasi ke LYNK.",
    "crumbs": [
      "Kata Pengantar"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Regresion Models",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nBuku ini dihosting oleh https://www.netlify.com sebagai bagian dari dukungan mereka terhadap perangkat lunak open source dan komunitasnya.",
    "crumbs": [
      "Kata Pengantar"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Pendahuluan",
    "section": "",
    "text": "Colophon\nRegresi merupakan salah satu teknik statistik yang paling banyak digunakan dalam berbagai bidang penelitian dan aplikasi industri. Metode ini memungkinkan kita untuk memahami hubungan antara variabel-variabel dalam suatu sistem, membuat prediksi, serta mengidentifikasi faktor-faktor yang berpengaruh terhadap variabel respons. Dari dunia ekonomi hingga ilmu kesehatan, pemodelan regresi telah menjadi alat utama dalam analisis data dan pengambilan keputusan berbasis bukti.\nDalam beberapa dekade terakhir, perkembangan teknologi komputasi dan statistik telah mengubah cara kita melakukan analisis data. Salah satu perkembangan yang paling signifikan adalah munculnya perangkat lunak open-source seperti R, yang menawarkan fleksibilitas tinggi, dukungan komunitas yang luas, serta berbagai pustaka statistik yang terus berkembang. R telah menjadi salah satu alat utama dalam dunia akademik dan industri untuk analisis data, termasuk dalam pemodelan regresi.\nBuku ini disusun untuk memberikan pemahaman yang mendalam tentang model regresi serta bagaimana menerapkannya menggunakan R. Dengan pendekatan yang sistematis, buku ini mencakup konsep-konsep dasar regresi, mulai dari regresi linear sederhana hingga regresi non-linear dan model regresi tingkat lanjut. Selain itu, buku ini menggunakan Quarto, sebuah sistem dokumentasi modern yang memungkinkan analisis data yang lebih interaktif dan reproducible.\nKeunggulan utama dari Quarto adalah kemampuannya dalam menggabungkan kode R dengan teks naratif dalam satu dokumen yang dapat di-render menjadi berbagai format, seperti HTML, PDF, atau dokumen Word. Hal ini memungkinkan pembaca untuk tidak hanya memahami teori di balik model regresi, tetapi juga melihat langsung bagaimana implementasinya dalam bentuk kode yang dapat dijalankan dan dimodifikasi sesuai kebutuhan.\nSelain teori dan implementasi dasar, buku ini juga membahas berbagai studi kasus dari berbagai disiplin ilmu. Setiap studi kasus disajikan dengan pendekatan yang praktis, mulai dari eksplorasi data, pemilihan model yang tepat, interpretasi hasil, hingga validasi model. Pendekatan ini bertujuan agar pembaca tidak hanya memahami konsep secara teoretis, tetapi juga mampu menerapkannya dalam situasi nyata.\nSalah satu tantangan utama dalam pemodelan regresi adalah pemilihan model yang sesuai dengan karakteristik data yang dianalisis. Overfitting, multikolinearitas, heteroskedastisitas, serta asumsi-asumsi dalam regresi adalah beberapa isu yang sering muncul dalam analisis data. Buku ini membahas bagaimana cara mengidentifikasi serta mengatasi tantangan-tantangan tersebut menggunakan berbagai teknik statistik dan visualisasi dalam R.\nSeiring dengan meningkatnya jumlah data yang tersedia saat ini, metode regresi juga terus berkembang. Model regresi klasik kini dilengkapi dengan pendekatan modern seperti regularisasi (Ridge dan Lasso Regression), regresi non-parametrik, hingga regresi berbasis machine learning. Buku ini memperkenalkan berbagai metode tersebut dan bagaimana mereka dapat digunakan untuk meningkatkan akurasi serta interpretabilitas model.\nTarget pembaca buku ini mencakup mahasiswa, dosen, peneliti, serta praktisi di berbagai bidang yang tertarik untuk memahami dan menerapkan model regresi dengan R. Buku ini ditulis dengan bahasa yang sederhana dan disertai dengan banyak contoh sehingga dapat diikuti oleh pembaca dari berbagai latar belakang, baik yang baru mengenal R maupun yang sudah memiliki pengalaman dalam analisis data.\nKami berharap buku ini dapat menjadi referensi yang bermanfaat bagi pembaca dalam mengembangkan keterampilan analisis data mereka. Selain itu, dengan penggunaan Quarto sebagai alat utama dalam dokumentasi dan presentasi hasil analisis, kami berharap pembaca dapat mengadopsi praktik yang lebih transparan dan reproducible dalam penelitian mereka.\nAkhir kata, kami mengucapkan terima kasih kepada semua pihak yang telah berkontribusi dalam penyusunan buku ini. Semoga buku ini dapat memberikan manfaat yang luas serta menjadi salah satu rujukan utama dalam memahami dan mengaplikasikan model regresi dengan R.\nVersi daring dari buku ini tersedia di https://r4rm.netlify.app dan sumber kode buku ini dapat diakses di https://github.com/dedenistiawan/. Buku ini dibuat menggunakan Quarto, yang memudahkan penulisan buku yang menggabungkan teks dan kode yang dapat dieksekusi.",
    "crumbs": [
      "Pendahuluan"
    ]
  },
  {
    "objectID": "01-basic-R.html",
    "href": "01-basic-R.html",
    "title": "Dasar-Dasar R",
    "section": "",
    "text": "“Why is that when one man builds a wall, the next needs to to know what’s on the other side?”\n– Tyrion Lannister-Game of Thrones\n\nR adalah bahasa pemrograman dan perangkat lunak yang dirancang khusus untuk keperluan analisis data, pengolahan statistik, dan visualisasi data. Bahasa ini menawarkan fleksibilitas untuk menulis kode guna menjalankan berbagai metode analisis statistik, mulai dari analisis statistik deskriptif hingga prediktif. Sebagai perangkat lunak, R menyediakan lingkungan interaktif untuk eksplorasi data, pengolahan, serta pembuatan laporan yang informatif. Kemampuan ini diperkuat dengan paket visualisasi yang sangat kaya seperti ggplot2, lattice, dan plotly, yang memungkinkan pengguna membuat grafik berkualitas tinggi. R tidak hanya membantu menganalisis data tetapi juga memvisualisasikannya dengan cara yang interaktif dan estetis, sehingga dapat menggali wawasan yang lebih dalam. R pertama kali dikembangkan pada awal 1990-an oleh Ross Ihaka dan Robert Gentleman di University of Auckland, Selandia Baru. Proyek ini terinspirasi oleh bahasa pemrograman S yang dikembangkan oleh John Chambers di Bell Laboratories. Pada tahun 1995, R dirilis sebagai perangkat lunak open source, sehingga memungkinkan pengembang di seluruh dunia untuk berkontribusi dalam pengembangannya.\nSejak itu, R berkembang pesat dengan ribuan paket yang tersedia di CRAN (Comprehensive R Archive Network) serta repositori lainnya. Dukungan komunitas dan kontribusi aktif dari pengembang di seluruh dunia telah menjadikan R sebagai bahasa yang terus berevolusi untuk memenuhi kebutuhan analisis data modern. R memiliki salah satu komunitas pengguna paling aktif di dunia. Komunitas ini terdiri dari akademisi, peneliti, praktisi industri, hingga pengembang perangkat lunak. Forum diskusi seperti RStudio Community, Stack Overflow, dan mailing list R membantu pengguna menyelesaikan masalah serta berbagi ide.\nEkosistem R terus berkembang dengan adanya RStudio sebagai Integrated Development Environment (IDE) yang populer. Selain itu, repositori paket seperti CRAN dan Bioconductor. Bioconductor adalah sebuah platform perangkat lunak untuk analisis data genomik yang kompleks, dikembangkan khusus untuk mendukung penelitian dalam bioinformatika dan biologi komputasi. Dibangun di atas bahasa pemrograman R, Bioconductor menyediakan berbagai paket yang dirancang untuk analisis data omics, seperti genomik, proteomik, dan metabolomik. Dukungan komunitas yang besar, dokumentasi yang melimpah, dan ketersediaan sumber daya membuat R menjadi alat yang mudah diakses oleh pemula sekaligus sangat berguna bagi pengguna tingkat lanjut.\nR dapat diintegrasikan dengan berbagai bahasa pemrograman lain, seperti Python, C++, Java, dan SQL. Kompatibilitas ini memungkinkan pengguna untuk menggabungkan kekuatan masing-masing bahasa dalam satu proyek. Misalnya, pengguna dapat memanfaatkan Python untuk preprocessing data skala besar, kemudian menggunakan R untuk analisis statistik mendalam dan visualisasi. Selain itu, R juga mendukung integrasi dengan berbagai perangkat lunak lain seperti Excel, Tableau, dan Power BI, membuatnya menjadi bagian penting dalam alur kerja data modern.",
    "crumbs": [
      "Dasar-Dasar R"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html",
    "href": "01-1r-rstudio.html",
    "title": "1  Pengantar R",
    "section": "",
    "text": "1.1 Install R dan R Studio\nUntuk memulai menggunakan R, langkah pertama adalah menginstal perangkat lunaknya. Berikut langkah-langkah instalasinya:\nSetelah R terinstal, unduh RStudio, sebuah Integrated Development Environment (IDE) untuk R, dari https://www.rstudio.com. Pilih versi gratis (RStudio Desktop) dan instal sesuai dengan sistem operasi Anda.\nRStudio adalah IDE yang dirancang khusus untuk mempermudah penggunaan R. Dibandingkan dengan antarmuka dasar R, RStudio menawarkan pengalaman pengguna yang lebih nyaman melalui fitur-fitur berikut:\nCRAN (Comprehensive R Archive Network) adalah repositori resmi yang menyimpan ribuan paket tambahan untuk memperluas fungsi R. Paket-paket ini mencakup berbagai bidang aplikasi, seperti statistik, visualisasi, dan machine learning. Untuk mengunduh dan menginstal paket di R, langkah-langkahnya adalah sebagai berikut:\nlibrary(ggplot2)\n#&gt; Warning: package 'ggplot2' was built under R version 4.4.2\nPaket yang diunduh akan otomatis tersimpan di komputer Anda dan dapat digunakan kapan saja tanpa perlu mengunduh ulang. Dengan CRAN, pengguna dapat dengan mudah menyesuaikan R untuk berbagai kebutuhan analisis data.",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html#install-r-dan-r-studio",
    "href": "01-1r-rstudio.html#install-r-dan-r-studio",
    "title": "1  Pengantar R",
    "section": "",
    "text": "Buka situs resmi CRAN (Comprehensive R Archive Network)\nPilih sistem operasi yang digunakan (Windows, macOS, atau Linux).\nUnduh file instalasi dan ikuti instruksi instalasinya. Unduh dan Instal RStudio\n\n\n\n\nScript Editor: Memungkinkan penulisan dan pengelolaan skrip dengan mudah.\nConsole: Tempat menjalankan perintah R secara langsung.\nEnvironment Pane: Menampilkan variabel, data, dan objek yang sedang aktif.\nPlots Pane: Menampilkan hasil visualisasi seperti grafik dan plot.\nPackages Pane: Memudahkan instalasi dan pengelolaan pustaka.\n\n\n\nBuka RStudio dan pastikan Anda terhubung ke internet.\nGunakan perintah install.packages() untuk menginstal library atau paket.\nSetelah instalasi selesai, muat paket ke dalam sesi kerja menggunakan perintah library(). Contoh:",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html#dasar-dasar-r",
    "href": "01-1r-rstudio.html#dasar-dasar-r",
    "title": "1  Pengantar R",
    "section": "\n1.2 Dasar-Dasar R",
    "text": "1.2 Dasar-Dasar R\nObjek dan Variabel Dalam R, objek adalah entitas yang menyimpan data atau hasil perhitungan. Objek bisa berupa angka, teks, tabel, atau bahkan fungsi. Setiap objek di R memiliki nama yang digunakan untuk merujuknya dalam kode, dan objek ini dapat disimpan ke dalam variabel untuk memudahkan manipulasi data.\nVariabel adalah nama yang diberikan untuk menyimpan nilai atau objek. Variabel di R tidak memerlukan deklarasi tipe data sebelumnya, yang berarti kita dapat langsung menyimpan nilai apapun ke dalam variabel tersebut.\nVariabel dapat dibuat dengan cara memberi nama pada objek dan menggunakan operator penugasan &lt;- untuk menyimpan nilai ke dalam variabel.\n\nx &lt;- 5      # Menyimpan angka 5 dalam variabel x\nnama &lt;- \"John\"  # Menyimpan string \"John\" dalam variabel nama\n\nDi atas, x dan nama adalah variabel yang menyimpan objek berupa angka dan teks.\nMengakses Variabel Setelah variabel dibuat, kita dapat mengakses nilai yang tersimpan dalam variabel tersebut dengan cukup menyebutkan nama variabel:\n\nprint(x)    # Output: 5\n#&gt; [1] 5\nprint(nama) # Output: \"John\"\n#&gt; [1] \"John\"",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html#tipe-data-dalam-variabel",
    "href": "01-1r-rstudio.html#tipe-data-dalam-variabel",
    "title": "1  Pengantar R",
    "section": "\n1.3 Tipe Data dalam Variabel",
    "text": "1.3 Tipe Data dalam Variabel\nVariabel di R dapat menyimpan berbagai tipe data, antara lain:\n\nNumerik: Menyimpan angka dengan atau tanpa desimal.\nKarakter (String): Menyimpan teks.\nLogika: Menyimpan nilai TRUE atau FALSE.\nFaktor: Digunakan untuk variabel kategorikal.\nDaftar (List), Vektor, Matriks, dan Data Frame: Struktur data kompleks yang menyimpan koleksi data.\n\nContoh variabel dengan berbagai tipe data:\n\nangka &lt;- 10          # Numerik\nnama &lt;- \"Andi\"       # Karakter\nstatus &lt;- TRUE       # Logika\nkategori &lt;- factor(c(\"A\", \"B\", \"A\", \"C\"))  # Faktor\n\n\n1.3.1 Operasi dengan Variabel\nOperasi dengan Variabel Variabel dapat digunakan dalam operasi matematika dan logika. Misalnya, jika kita memiliki dua variabel a dan b, kita bisa melakukan operasi penjumlahan:\n\na &lt;- 3\nb &lt;- 4\nhasil &lt;- a + b  # Menyimpan hasil penjumlahan a dan b ke dalam variabel hasil\nprint(hasil)    # Output: 7\n#&gt; [1] 7\n\n\n1.3.2 Menimpa dan Mengubah Nilai Variabel\n\nx &lt;- 5      # x sekarang bernilai 5\nx &lt;- 10     # x sekarang bernilai 10 (nilai sebelumnya akan tertimpa)\nprint(x)    # Output: 10\n#&gt; [1] 10",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html#struktur-data-pada-r",
    "href": "01-1r-rstudio.html#struktur-data-pada-r",
    "title": "1  Pengantar R",
    "section": "\n1.4 Struktur Data pada R",
    "text": "1.4 Struktur Data pada R\nR menyediakan berbagai jenis struktur data untuk mengelola dan memanipulasi data dalam berbagai bentuk. Pemahaman tentang struktur data di R sangat penting karena memungkinkan kita untuk menyimpan dan bekerja dengan data yang lebih kompleks. Beberapa struktur data dasar yang tersedia di R meliputi vektor, matriks, data frame, dan list.\n\n1.4.1 Vektor\nVektor adalah struktur data paling dasar di R. Vektor adalah sekumpulan elemen yang memiliki tipe data yang sama, seperti angka, karakter, atau logika. Vektor dapat dibuat menggunakan fungsi c(), yang berarti combine atau concatenate. Contoh pembuatan vektor:\n\nvektor_angka &lt;- c(1, 2, 3, 4, 5)      # Vektor angka\nvektor_karakter &lt;- c(\"A\", \"B\", \"C\")   # Vektor karakter\nvektor_logika &lt;- c(TRUE, FALSE, TRUE)  # Vektor logika\n\nMengakses elemen vektor:\n\nvektor_angka[1]   # Mengakses elemen pertama (1)\n#&gt; [1] 1\nvektor_karakter[2] # Mengakses elemen kedua (\"B\")\n#&gt; [1] \"B\"\n\nVektor bisa berupa vektor numerik, vektor karakter, atau vektor logika, tergantung tipe data elemen yang ada di dalamnya.\n\n1.4.2 Matriks\nMatriks adalah struktur data dua dimensi, yang berarti memiliki baris dan kolom. Semua elemen dalam matriks harus memiliki tipe data yang sama, seperti vektor. Contoh pembuatan matriks:\n\nmatriks &lt;- matrix(1:6, nrow = 2, ncol = 3)  # Matriks 2x3 dengan elemen dari 1 hingga 6\nprint(matriks)\n#&gt;      [,1] [,2] [,3]\n#&gt; [1,]    1    3    5\n#&gt; [2,]    2    4    6\n\n\n1.4.3 Data Frame\nData frame adalah struktur data yang lebih kompleks dan sering digunakan dalam analisis data. Data frame terdiri dari kolom-kolom yang dapat memiliki tipe data yang berbeda (numerik, karakter, logika, dll.), mirip dengan tabel dalam basis data atau spreadsheet. Contoh pembuatan data frame:\n\ndf &lt;- data.frame(\n  Nama = c(\"John\", \"Alice\", \"Bob\"),\n  Umur = c(25, 30, 22),\n  Status = c(\"Single\", \"Married\", \"Single\")\n)\nprint(df)\n#&gt;    Nama Umur  Status\n#&gt; 1  John   25  Single\n#&gt; 2 Alice   30 Married\n#&gt; 3   Bob   22  Single\n\n\n1.4.4 List\nList adalah struktur data yang paling fleksibel di R. List dapat menyimpan berbagai jenis objek yang berbeda dalam satu struktur data, termasuk vektor, matriks, data frame, atau bahkan fungsi. Contoh pembuatan list:\n\ndaftar &lt;- list(\n  Nama = \"John\",\n  Umur = 25,\n  Nilai = c(90, 85, 88)\n)\nprint(daftar)\n#&gt; $Nama\n#&gt; [1] \"John\"\n#&gt; \n#&gt; $Umur\n#&gt; [1] 25\n#&gt; \n#&gt; $Nilai\n#&gt; [1] 90 85 88\n\n\n1.4.5 Faktor\nFaktor adalah tipe data di R yang digunakan untuk menyimpan data kategorikal. Faktor menyimpan data dalam bentuk level yang dapat digunakan untuk analisis kategorikal, seperti dalam model regresi atau analisis statistik lainnya. Contoh pembuatan faktor:\n\nstatus &lt;- factor(c(\"Single\", \"Married\", \"Single\", \"Divorced\"))\nprint(status)\n#&gt; [1] Single   Married  Single   Divorced\n#&gt; Levels: Divorced Married Single\n\nBerikut adalah perbandingan antara berbagai struktur data di R:\n\n\n\n\n\n\n\nStruktur Data\nDeskripsi\nContoh Penggunaan\n\n\n\nVektor\nSekumpulan elemen dengan tipe data yang sama\nMenyimpan data numerik atau karakter\n\n\nMatriks\nStruktur dua dimensi (baris dan kolom)\nMenyimpan data dalam bentuk tabel numerik\n\n\nData Frame\nTabel dua dimensi dengan tipe data berbeda\nMenyimpan data observasi dan variabel\n\n\nList\nKoleksi elemen dengan tipe data yang berbeda\nMenyimpan objek dengan tipe data campuran\n\n\nFaktor\nData kategorikal dengan level yang terbatas\nMengelompokkan data kategorikal",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  },
  {
    "objectID": "01-1r-rstudio.html#fungsi-dan-pemrograman-di-r",
    "href": "01-1r-rstudio.html#fungsi-dan-pemrograman-di-r",
    "title": "1  Pengantar R",
    "section": "\n1.5 Fungsi dan Pemrograman di R",
    "text": "1.5 Fungsi dan Pemrograman di R\nR menyediakan berbagai cara untuk mendefinisikan dan menggunakan fungsi dalam pemrograman. Fungsi adalah blok kode yang dirancang untuk melakukan tugas tertentu, menerima input, dan memberikan output. Pemrograman berbasis fungsi memungkinkan pengguna untuk menulis kode yang lebih modular dan terstruktur, yang memudahkan pemeliharaan dan pengembangan program.\n\n1.5.1 Definisi Fungsi\nFungsi di R dibuat menggunakan kata kunci function(). Fungsi ini dapat menerima satu atau lebih argumen dan menghasilkan nilai output. Contoh pembuatan fungsi:\n\n# Fungsi untuk menghitung kuadrat suatu angka\nkuadrat &lt;- function(x) {\n  return(x^2)   # Mengembalikan nilai kuadrat dari x\n}\n\n\n1.5.2 Pemanggilan fungsi\n\nhasil &lt;- kuadrat(5)  # Memanggil fungsi 'kuadrat' dengan argumen 5\nprint(hasil)          # Output: 25\n#&gt; [1] 25\n\n\n1.5.3 Argumen fungsi\nFungsi di R dapat menerima berbagai jenis argumen, yang bisa berupa variabel, nilai tetap, atau objek lain. Argumen juga bisa diberikan nilai default, yang berarti fungsi tetap dapat dipanggil meskipun beberapa argumen tidak diberikan nilai. Contoh argumen dengan nilai default:\n\n# Fungsi untuk menghitung hasil pembagian\nbagi &lt;- function(a, b = 2) {\n  return(a / b)  # Jika b tidak diberikan, akan menggunakan nilai default 2\n}\n\nprint(bagi(10))   # Output: 5 (10 dibagi 2)\n#&gt; [1] 5\nprint(bagi(10, 5)) # Output: 2 (10 dibagi 5)\n#&gt; [1] 2\n\n\n1.5.4 Fungsi dengan Beberapa Nilai Kembalian\nFungsi di R dapat mengembalikan lebih dari satu nilai. Salah satu cara untuk melakukan ini adalah dengan menggunakan list. Fungsi dapat mengembalikan objek yang lebih kompleks, seperti list, untuk menyimpan beberapa hasil sekaligus. Contoh fungsi dengan beberapa nilai kembalian:\n\nhasil_operasi &lt;- function(a, b) {\n  hasil_penjumlahan &lt;- a + b\n  hasil_perkalian &lt;- a * b\n  return(list(penjumlahan = hasil_penjumlahan, perkalian = hasil_perkalian))\n}\n\noutput &lt;- hasil_operasi(4, 5)\nprint(output$penjumlahan)  # Output: 9\n#&gt; [1] 9\nprint(output$perkalian)    # Output: 20\n#&gt; [1] 20\n\n\n1.5.5 Fungsi Bawaan di R\nR menyediakan banyak fungsi bawaan untuk melakukan berbagai tugas, seperti manipulasi data, analisis statistik, dan visualisasi. Fungsi-fungsi ini sangat berguna dan sering digunakan dalam berbagai analisis. Contoh fungsi bawaan:\n\n# Fungsi untuk menghitung rata-rata\nrata_rata &lt;- mean(c(1, 2, 3, 4, 5))  # Output: 3\nprint(rata_rata)\n#&gt; [1] 3\n\n\n1.5.6 Fungsi Anonim\nFungsi anonim adalah fungsi yang tidak memiliki nama. Fungsi jenis ini sering digunakan dalam operasi sementara atau dalam konteks tertentu, seperti dalam operasi dengan apply atau pemrograman berbasis vektor. Contoh fungsi anonim:\n\n# Menggunakan fungsi anonim dalam apply\nangka &lt;- c(1, 2, 3, 4, 5)\nhasil &lt;- sapply(angka, function(x) x^2)  # Menerapkan fungsi untuk menghitung kuadrat\nprint(hasil)  # Output: 1 4 9 16 25\n#&gt; [1]  1  4  9 16 25",
    "crumbs": [
      "Dasar-Dasar R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Pengantar R</span>"
    ]
  }
]